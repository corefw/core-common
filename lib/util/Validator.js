/**
 * Defines the Validator class.
 *
 * @author Luke Chavers <luke@c2cschools.com>
 * @since 5.0.0
 * @license None
 * @copyright 2017 C2C Schools, LLC
 */
"use strict";

// Project Deps
const BaseClass = require( "../BaseClass" );
const ERRORS	= require( "../Errors");  		// todo: convert to this.$dep pattern

// Third party libraries
const TIPE 		= require( "tipe" );  			// todo: convert to this.$dep pattern
const _ 		= require( "lodash" );  		// todo: convert to this.$dep pattern

/**
 * This utility class facilitates validation, especially of JavaScript
 * and JSON objects against JSON Schemas.
 *
 * @memberOf Util
 * @extends Core.BaseClass
 */
class Validator extends BaseClass {

	/**
	 * @constructor
	 * @param {?object} cfg A configuration object that will be consumed by
	 * the newly instantiated class (object).
	 */
	constructor( cfg ) {

		// Call parent
		super(cfg);

		// Execute immediately, if requested
		if( cfg.immediate === true ) {
			this.validate();
		}

	}

	/**
	 * The object to be validated.
	 *
	 * @access public
	 * @var {object}
	 */
	get obj() {
		return this._getConfigValue( "obj", null );
	}
	set obj( val ) {
		this._setConfigValue( "obj", val );
	}

	/**
	 * The schema that will be used in the validation of `obj`.
	 *
	 * @access public
	 * @var {object}
	 */
	get schema() {
		return this._getConfigValue( "schema", null );
	}
	set schema( val ) {
		this._setConfigValue( "schema", val );
	}

	/**
	 * When TRUE, validation will be skipped (passed) if either the `obj` or
	 * `schema` is NULL.
	 *
	 * @access public
	 * @var {boolean}
	 * @default false
	 */
	get skipIfNull() {
		return this._getConfigValue( "skipIfNull", false );
	}
	set skipIfNull( val ) {
		this._setConfigValue( "skipIfNull", val );
	}

	/**
	 * When TRUE, validation errors will be thrown verbatim (not wrapped by
	 * a custom error).
	 *
	 * @access public
	 * @var {boolean}
	 * @default false
	 */
	get throwTv4Errors() {
		return this._getConfigValue( "throwTv4Errors", false );
	}
	set throwTv4Errors( val ) {
		this._setConfigValue( "throwTv4Errors", val );
	}

	/**
	 * Stores schema `definitions` (refs/references) that will be used
	 * to populate the schema with common schema parts before validation.
	 *
	 * @access public
	 * @var {?object}
	 * @default null
	 */
	get definitions() {
		return this._getConfigValue( "definitions", null );
	}
	set definitions( val ) {
		this._setConfigValue( "definitions", val );
	}

	/**
	 * Starts a validation operation.
	 *
	 * @param {?object} [cfg=null] Optional configuration values that will be
	 * 		used to configure the validator prior to validation. Any
	 * 		configuration setting that can be passed to the Validator's
	 * 		constructor can also be passed here.
	 * @returns {void} Errors will be thrown if validation fails.
	 */
	validate( cfg ) {

		// Locals
		let me = this;

		// Apply New Config
		me._setConfigValues( cfg );

		// Skip if necessary
		if( me.skipIfNull && ( me.obj === null || me.schema === null ) ) {
			return;
		}

		// Do it
		me._validateObject( me.obj, me.schema );

	}

	/**
	 * This method executes the `tv4` validator on a provided object.
	 *
	 * @access private
	 * @throws UnrecognizedParameterError, MissingParameterError, InvalidParameterError
	 * @param {object} obj The object to validate.
	 * @param {object} schema A "JSON Schema" object
	 * @returns {void} This method will THROW if validation fails, but otherwise
	 * it does not return anything.
	 */
	_validateObject( obj, schema ) {

		// Locals
		let me = this;
		let defs = me.definitions;
		let err;

		// Prep Schema
		schema = me._prepareSchema( schema );

		// Deps
		const TV4 = me.$dep("tv4");
		const _ = me.$dep("lodash");
		const errs = me.$dep("errors");

		// Apply definitions
		TV4.reset();
		if( defs !== null ) {
			_.each( defs, function( v, k ) {
				TV4.addSchema( k, v );
			});
		}

		// Run tv4 ..
		if ( !TV4.validate( obj, schema ) ) {

			if( me.throwTv4Errors ) {
				err = TV4.error;
			} else {
				err = me._createValidationError( TV4.error );
			}

			throw err;

		}

		// Check for missing schemas
		if( TV4.missing.length > 0 ) {

			throw new errs.MissingSchemaDefinitionError(
				"Missing definition for $ref:" + TV4.missing[0]
			);

		}

	}

	/**
	 * This method provides an error customization layer on top of `tv4`
	 * validation, which assists in making API errors, that are caused by
	 * request param validation failures, more intuitive to the client.
	 *
	 * @access private
	 * @throws {Errors.UnrecognizedParameterError}
	 * @throws {Errors.MissingParameterError}
	 * @throws {Errors.InvalidParameterError}
	 * @see https://github.com/geraintluff/tv4/blob/master/tv4.js#L1427
	 * @param {Error} tv4error An error generated by `tv4` during a failed
	 * 			validation operation.
	 */
	_createValidationError( tv4error ) {

		let me 			= this,
			code 		= tv4error.code,
			paramName	= tv4error.dataPath,
			errorType 	= ERRORS.InvalidParameterError,
			msgPrefix, isRootParamError, finalError;

		// Determine if this validation error
		// applies to the root parameter object.

		// a. Remove any / prefixes
		paramName = paramName.replace(/^\//, "");

		// b. Check for other slashes..
		isRootParamError = true;

		if( paramName.indexOf("/") !== -1 ) {
			isRootParamError = false;
		}

		// Set default message prefix
		msgPrefix = "Invalid request parameter '" + paramName + "'";

		// Apply overrides (if applicable)
		switch( code ) {

			case 302:

				// Do not override non-root errors of this type.
				if( isRootParamError ) {
					msgPrefix = "Invalid Request"
					tv4error.message = "Missing required parameter: '" + tv4error.params.key + "'";
					errorType = ERRORS.MissingParameterError;
				}

				break;

			case 303:

				// Do not override non-root errors of this type.
				if( isRootParamError ) {
					tv4error.message = "This parameter is not recognized";
					errorType = ERRORS.UnrecognizedParameterError;
				}

				break;

		}

		// Wrap the tv4 error and return..
		return new errorType( tv4error, msgPrefix );

	}

	/**
	 * This method prepares the request schema for use by `tv4`
	 * by making a few, minor, alterations.
	 *
	 * @access private
	 * @returns {object} A validation schema ready for use by `tv4`.
	 */
	_prepareSchema( original ) {

		// Locals
		let me = this, schema;

		// Clone the original
		schema = _.clone( original );

		// Make a few mods..
		if( schema.id !== undefined ) {
			delete schema.id;
		}

		// The 'definitions' property should be plural
		if( schema.definition !== undefined ) {
			if( schema.definitions === undefined ) {
				schema.definitions = schema.definition;
			}
			delete schema.definition;
		}

		// Prohibit unrecognized parameters
		// (disabled, for now, will come back to it...)
		// -> schema.additionalProperties = false;

		// Done
		return schema;

	}

}

module.exports = Validator;